datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum BoosterType {
  STANDARD
  RARE
  EPIC
  MAXI
}

enum UserRole {
  USER
  ADMIN
}

enum TradeStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELLED
}

model User {
  id                 Int               @id @default(autoincrement())
  username           String            @unique
  password           String
  role               UserRole          @default(USER)
  credits            Int               @default(0)
  collectedCards     CollectedCard[]
  boosterPurchases   BoosterPurchase[]
  totalBoostersOpened Int              @default(0)
  legendaryCardsFound Int              @default(0)
  shinyCardsFound    Int              @default(0)
  lastDailyReward    DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  isPublic           Boolean           @default(true)
  initiatedTrades    TradeOffer[]      @relation("InitiatedTrades")
  receivedTrades     TradeOffer[]     @relation("ReceivedTrades")
}

model Set {
  id          Int      @id @default(autoincrement())
  code        String   @unique // Code unique du set (ex: "XPRCHT")
  name        String   // Nom complet du set
  description String?  // Description optionnelle du set
  releaseDate DateTime @default(now())
  cards       Card[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Card {
  id             Int               @id @default(autoincrement())
  name           String
  rarity         Rarity
  description    String?
  quote          String?
  power          Int
  imageUrl       String            @default("/images/cards/placeholder.webp")
  setId          Int              // Relation avec le set
  set            Set              @relation(fields: [setId], references: [id])
  collectedCards CollectedCard[]
  boosterCards   CardFromBooster[]
  tradeCards     TradeCard[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model CollectedCard {
  id        Int      @id @default(autoincrement())
  userId    Int
  cardId    Int
  quantity  Int      @default(1)
  isShiny   Boolean  @default(false)
  isNew     Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])
  card      Card     @relation(fields: [cardId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, cardId, isShiny])
}

model BoosterPurchase {
  id        Int               @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  type      BoosterType
  cost      Int
  createdAt DateTime @default(now())
  cards     CardFromBooster[]
}

model CardFromBooster {
  id        Int      @id @default(autoincrement())
  boosterId Int
  cardId    Int
  isShiny   Boolean  @default(false)
  booster   BoosterPurchase @relation(fields: [boosterId], references: [id])
  card      Card     @relation(fields: [cardId], references: [id])
}

model BoosterConfig {
  id          Int         @id @default(autoincrement())
  type        BoosterType @unique
  cost        Int
  cardCount   Int
  updatedAt   DateTime    @updatedAt
}

model TradeOffer {
  id            Int         @id @default(autoincrement())
  initiatorId   Int
  recipientId   Int
  status        TradeStatus @default(PENDING)
  message       String?
  expiresAt     DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  initiator     User        @relation("InitiatedTrades", fields: [initiatorId], references: [id])
  recipient     User        @relation("ReceivedTrades", fields: [recipientId], references: [id])
  
  cards         TradeCard[]

  @@map("trade_offers")
}

model TradeCard {
  id            Int         @id @default(autoincrement())
  tradeOfferId  Int
  cardId        Int
  isShiny       Boolean     @default(false)
  quantity      Int         @default(1)
  isOffered     Boolean     @default(true)
  
  tradeOffer    TradeOffer  @relation(fields: [tradeOfferId], references: [id])
  card          Card        @relation(fields: [cardId], references: [id])

  @@map("trade_cards")
}

model GameSettings {
  id                Int      @id @default(autoincrement())
  key              String   @unique
  value            String
  description      String?
  updatedAt        DateTime @updatedAt

  @@map("game_settings")
}